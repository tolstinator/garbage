Анализ поведения срабатывания различных типов сборщиков мусора для программы из первого урока данной модуля.

Serial и CMS
Иногда программа выводит OutOfMemoryError после очередного добавления User (~ 25000) и GC успевает убрать из heap несколько User до того, как программа завершится с кодом -1. Иногда OutOfMemoryError выводится прямо перед выходом с -1.
Хотя в документе "Memory Management in the Java HotSpot VM" написано (и на рисунке показано) что CMS GC для young generation срабатывает как в Parallel GC.

Parallel и Parallel Compacting
После очередного добавления User (~ 10000) и GC начинает убирать из heap User до того, как программа завершится с кодом -1. OutOfMemoryError выводится параллельно с финализациями User (разрозненно), скорее всего потому, что GC выделяет один поток на вывод сообщения, а остальные на финализации.
Тут информация из документа совпадает с опытом)

***

Как вы считаете какой из сборщиков мусора подойдет наиболее оптимально для приложения заявок из второго модуля?

Если на запускающей машине имеется только одно ядро процессора, то подойдёт Serial GC.
Если на запускающей машине больше одного ядра процессора, то Serial GC сразу отсекается. Судя по всему, в приложении заявок будет много объектов в old generation, поэтому можно использовать Parallel Compacting GC, потому что он использует parallel collection и для old generation, в отличие от Parallel GC. CMS тоже может подойти, если допускается использовать GC и само приложение одновременно.

***

Какой тип сборщика будет оптимален для сервеного приложения?

Самый подходящий - CMS GC, так как в таком приложении в большинстве случаев большой размер old generation. А также на серверах, как правило много процессорных ядер.
