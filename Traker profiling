Используя различные утилиты (например: jmap, jstat, jstack, jconsole, jps) для анализа памяти виртуальной машины провести анализ работы программы из второго модуля. Программа заявок.
Данные анализа описать в текстовом файле и добавить в репозиторий. В файле нужно указать, каким инструментом проведен анализ и что по нему видно.

Использованная утилита jconsole.
По мере добавления заявок, растёт размер heap. Но так как по одной заявке этот рост не заметен, я изменил код так, чтобы при добавлении заявки, размер коллекции заявок увеличивался вдвое. Уже через несколько итераций размер heap начинает экспоненциально расти.
Заметил также, что когда я ставил ограничение на максимальный размер меньше 4 Мб, jconsole не подключалась к java-процессу. Свыше этого - подключалась. Если ставлю ограничение 4.5 МБ - на самом деле устанавливался ~ 6 Мб. Если 6.5 Мб - устанавливался ~ 8 Мб. Как-будто кратно 2 Мб в большую сторону.
Если принудительно запустить GC, это помогало, но не надолго.
Количество потоков выполнения GC не менялось вообще - 15 постоянно.
А насчёт классов я не понял. Даже когда в коллекции было 130000 Item, количество классов оставалось примерно 2500.



Попробовать добиться состояния выхода за пределы памяти и посмотреть состояние виртуальной машины.

При ограничении 10 Мб и количестве Item в коллекции выше примерно 260000, программа выходила в ошибку OutOfMemory: Java heap space. Young Generation collection успевал срабатывать примерно 25 раз, Old Generation - 1.
